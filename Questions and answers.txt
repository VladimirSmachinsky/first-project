Теория тестирования

Что такое тестирование? С какой целью его проводят? 
Тестирование - это комплекс мер для проверки и улучшению качества продукта. И соответствия его первоначальным требованиям.

Что делает тестировщик?
Тестировщик - это человек проверяющий соответствие продукта на ОР и ФР.
 
Что такое QA, QC, Testing? В чём между ними разница?
Как QA, так и QC в процессе разработки ПО влияют на качество конечного продукта и улучшают его надежность, безопасность и функциональность: QA помогает снизить риски и повысить эффективность процесса разработки, 
а QC, с другой стороны, обеспечивает проверку и контроль качества на финальной стадии разработки.

Что такое верификация и валидация?
Соответствие продукта требованиям (спецификации)
Верификация – это процесс проверки, что продукт соответствует определенным требованиям и спецификациям на каждом этапе разработки. Верификация фокусируется на «Делаем ли мы продукт правильно?«. Она включает в себя следующие действия:
Анализ требований
Использование статических методов анализа кода
Контроль проекта и процессов разработки
Проведение код-ревью
Пример верификации:
Проверка того, что требования к программному обеспечению ясны, полны и не противоречивы.

Валидация – это процесс проверки, что продукт соответствует ожиданиям и потребностям пользователей. Валидация фокусируется на «Делаем ли мы правильный продукт?«. Она включает в себя следующие действия:
Соответствие продукта потребностям пользователей
Тестирование функциональности
Тестирование производительности
Тестирование безопасности
Тестирование совместимости
Проведение пользовательского приема
Пример валидации:
Проверка того, что пользовательский интерфейс программного обеспечения удобен и соответствует ожиданиям пользователей.

Расскажи про принципы тестирования.
Нам известны 7 принципов тестирования и сейчас мы их подробно разберём.
Итак, приступим:
Исчерпывающее тестирование невозможно
Тестирование демонстрирует наличие дефектов, а не их отсутствие
Заблуждение об отсутствии ошибок
Раннее тестирование сохраняет время и деньги
Принцип скопления или кластеризация дефектов
Тестирование зависит от контекста
Парадокс пестицида 

Методы, типы и уровни тестирования?
Методы и Уровни: 1. Модульное, 2. Системное, 3. Приемочное 4. Смок, 5. Интеграционное 6. Черный, Серый, Белый ящик, 7. Регриссионное
Типы:  Функциональное, Нефункциональное, 
Какие есть типы/виды тестирования?
Типы: Ручное, Автоматическое тестирование
Модульные тесты Модульные тесты работают на очень низком уровне, близко к исходному коду приложения. ...

Виды функционально тестирования:
Интеграционные тесты ...
Функциональные тесты ...
Сквозные тесты ...
Приемочное тестирование ...
Тестирование производительности ...
Smoke-тестирование
Регрнссионное тестирование

Виды нефункционального тестирования: 
Тестирование производительности
Нагрузочное
Безопасности
Тестирование на отказ
Совместимости
Юзабилити-тестирование
Масштабируемости
Объемное тестирование
Стресс-тестирование
Удобства сопровождения
Совместимости
Общей эффективности
Надежности
Выносливости
Тестирование восстановления после катастрофического отказа

Какие есть методы тестирования?
Черный, Серый, Белый ящик, Автоматическое, Ручное

Какие есть уровни тестирования? 
Юнит-тестирование
Интеграционное тестирование
Системное тестирование
Приемочное тестирование
1. Юнит-тестирование:
Юнит — это самая маленькая часть продукта, которая может тестироваться. Название юнит равнозначно названию модуль, следовательно юнит-тестирование равнозначно модульному тестированию (также иногда называют блочным тестированием). Юнит-тестирование — это поиск ошибок в отдельных (изолированных) юнитах-компонентах. 
2. Интеграционное тестирование:
После завершения юнит-тестирования, два (или более) программных компонента проверяются на качество интеграции между собой. Взаимодействуют ли они между собой как ожидалось, или есть ошибки в интерфейсе между ними?
3. Системное тестирование
После завершения юнит- и интеграционного тестирования наступает этап системного тестирования. Проверка всех элементов, составляющих программную систему, на соответствие требованиям.
4. Приемочное тестирование
Последний уровень — проверка, выполнены ли требования конечных пользователей. Если приемочное тестирование успешно завершено, продукт идет на доставку (delivery), и считается, что продукт будет нормально работать в пользовательском окружении.

Что такое регрессионное тестирование?
Это проверка внедренной фичи или функциональности в рабочий продук. Проверка что не сломали остальной продукт.

Что такое функциональное тестирование?
Это проверка работоспособности основных функций продукта.

Что такое нефункциональное тестирование?
Это проверка самой программы  ее безопасности, Кросбраузерность, удобство использования,, адаптивность, нагрузочное.и.т.д.

Что такое интеграционное тестирование?
Интеграционное тестирование:
После завершения юнит-тестирования, два (или более) программных компонента проверяются на качество интеграции между собой. Взаимодействуют ли они между собой как ожидалось, или есть ошибки в интерфейсе между ними?

Что такое системное тестирование?
Системное тестирование
После завершения юнит- и интеграционного тестирования наступает этап системного тестирования. Проверка всех элементов, составляющих программную систему, на соответствие требованиям.

Что такое смоук-тестирование?
Это проверка основных функций системы (Включение, выключение и.т.д.)

Что такое компонентное тестирование?
Модульное — проверяет отдельные модули программы, чтобы убедиться, что они работают правильно независимо друг от друга.

Что такое санитарное тестирование?
Санитарное тестирование – это вид тестирования сборки ПО после изменений в коде или функциональности. 
Его цель – проверить, что старые ошибки исправлены, а новых не появилось. Если Sanity-тест не проходит, сборка отправляется на доработку, а не на более тщательное тестирование.

Что такое исследовательское тестирование?
Это неоформленное тестирование, сам выбираешь способы и что нужно тестированть, сам делаешь документацию.

Что такое тестирование безопасности?
Тестирование безопасности – комплекс исследований программного продукта, направленный на тестирование, обнаружение и исправление дефектов, связанных с сохранностью пользовательских данных, а именно.

Что такое «тестирование белым ящиком»?
Тестирование «белого ящика» подразумевает, что тестировщик имеет полный доступ к исходному коду программы и может анализировать его для выявления ошибок и недостатков. Этот метод обычно используется разработчиками для проверки своего кода на корректность.

Что такое «тестирование черным ящиком»? 
Тестирование «черного ящика» заключается в проверке функциональности программы без доступа к ее исходному коду. Тестировщик оценивает работу программы, основываясь на внешних проявлениях и поведении, не зная, как она устроена внутри.

Что такое «тестирование серым (стеклянным) ящиком»?
Тестирование «серого ящика» – это комбинация двух предыдущих методов. Тестировщик имеет частичный доступ к исходному коду или знает некоторые детали его работы, но в основном оценивает поведение программы снаружи.
 
В чем разница между кроссбраузерным и кроссплатформенным тестированием? 
Кроссплатформенность — это способность ПО работать с несколькими аппаратными платформами или операционными системами. Кроссбраузерное тестирование, например, может быть упрощено за счёт различных инструментов. Например, можно тестировать на виртуальной машине.
Кроссбраузерное тестирование - это практика обеспечения уверенности в том, что веб-сайты и веб-приложения, которые вы создаёте, работают в приемлемом количестве браузеров
Кроссплатформенность (межплатформенность) — способность программного обеспечения работать с несколькими аппаратными платформами или операционными системами.
Кроссплатформенная разработка приложений — это смелый подход к мобильной разработке и разработке в целом. Целью разработки кроссплатформенных приложений является повсеместная доступность на нескольких устройствах в рамках единой унифицирующей кодовой базы.

Что такое «end-to-end (сквозное) тестирование»? 
Это форма тестирования, которая проверяет работоспособность программного продукта от начала до конца, воссоздавая реальные сценарии использования и проверяя взаимодействие между различными компонентами системы.

Тестовая документация

Что такое тест-план? Из каких элементов он состоит?
Тест план - это план работ по тестированию продукта. Он состоит:
1. Введение, 2. Область тестирования, 3.Стратегия тестирования, 4.Ресурсы и Инструменты, 5. Список окружения, 6. Критерий качества, 7. Риски процесса тестирования
Что необходимо протестировать?
Как будет проводиться тестирование?
Когда будет проводиться тестирование?
Критерии начала тестирования.
Критерии окончания тестирования.

Что такое «парадокс пестицида»?
Если к какому-либо функционалу применять постоянно повторяющийся набор тестов – то эти проверки в скором времени будут неэффективны в нахождении новых дефектов.
Поэтому тест-кейсы должны постоянно обновляться и видоизменяться. Важно пользоваться такими рекомендациями:

Что такое отчёт о тестировании и из каких элементов он состоит?
Отчет о результатах тестирования - периодический отчет, в котором документируется подробная информация о выполнении теста и его результате. Также он содержит условия, предположения, ограничения теста, какой элемент теста кем тестируется

Что такое баг-репорт? Какие у него основные элементы?
БР - это артифакт выевленный в процессе тестирования и соответствующе оформленный. 1.Номер, 2 Заголовок, 3. Описание, 4.Предусловие, 5. Шаги, 6 ОР и ФР, 7. Окружение, 8. Серьезность, Скрины
 
Что такое ОР и ФР? В чём разница?
ОР - Ожидаемый результат, ФР - фактический результат

В чем разница между чек-листом и тест-кейсом? Из каких элементов они состоят?
Чек лист - это Логика и Верстка (меню), Тест кейс (рецепт) состоит 1. Номер, 2. Название кейса, 3.Предусловие, 4. Номер шага, 5. Описание шага, 6. ОР, 7. Окружение, 8. Статус, 9. Ссылка на БР.

В каких случаях больше подходит чек-лист, а в каких — тест-кейсы?
Чек-лист пушут всегда, Тест-кейс при необходимости или малом объеме тестирования.

Процессы:

Опиши жизненный цикл разработки и выпуска фичи в релиз.
1. Сбор и анализ требований , 2. Документирование требований, 3. Дизайн, 4. Разработка ПО, 5. Тестирование, 6. Внедрение и поддержка продукта

Что такое waterfall, scrum и agile? В чём их особенности?
waterfall - это водопадный метод тестирования линейная модель разработки, ЕЕ особенности определенные и фиксированные процессы и сроки, бюджет. Плохо подкодит под изменчивые требования.
1. Моделирование бизнеса
2. Требования
3. Анализ и дизайн
4. Разработка
5. Тестирование
6. Публикация (deployment)
7. Управление конфигурациями
8. Проектный менеджмент
9. Среда (environment)
scrum - это гибкая модель разработки. Работа делится на двухнедельные отрезки - спринт. За один спринт команда должна подготовить рилиз определенной функциональности.
1. Продуктовый бэклог - пополняемый набор задач
2. Бэклог спринта - задачи, готовые к работе
3. Ежедневные планёрки - что сделано, что будешь делать, есть ли проблемы
4. План действий
5. Продуктовый инкремент - релиз
agile - это набор принципов разработки на этой основе появляется гибкая модель. Состоит всего из трех фаз:
1. Предпроектная подготовка - анализ, оценка реализуемости, бизнес-кейсы
2. Проектный жизненный цикл - итеративная разработка, определение максимального лимита времени, MoSCoW-приоретизация (Must, Should, Could, Won't)
3. Постпроектный этап - ретроспектива

Какие существуют этапы тестирования фичи?
1. Анализ продукта
2. Работа с требованиями
3. Разработка стратегии тестирования и планирование процедур контроля качества
4. Создание тестовой документации
5. Тестирование прототипа
6. Основное тестирование
7. Стабилизация
8. Эксплуатация

Какие существуют этапы тестирования релиза?
1. Анализ 
3. Разработка стратегии тестирования и планирование процедур контроля качества
4. Создание тестовой документации
5. Тестирование прототипа
6. Основное тестирование
7. Стабилизация
8. Эксплуатация

Чем релиз отличается от патча?
В отличие от релиза, патч: не изменяет номер версии программы не фигурирует в уведомлениях о выходе новых версий не устанавливается системой автоматического обновления.
Патч- исправляет имеющиеся баги. Регрессионное тестирование не проводится.
Релиз - это измененения функциональности и исправление багов.

Расскажи про критерии начала и окончания тестирования фичи.
1. Процесс проработки ТЗ
2. Составление чек-листа
3. Разработка
4. Ревью первой сборки фичи
5. Тестирование на платформе
6. Интеграционное тестирование

Расскажи про критерии начала и окончания тестирования релиза.
STLC, или жизненный цикл тестирования
Критерий начала: описывает условия, которые должны быть соблюдены перед тем как начнется тестирование.
Критерий завершения: описывает условия, которые должны быть соблюдены перед тем как тестирование завершится.
1. Анализ требований
2. Планирование тестирования
3. Создание тест-кейсов
4. Настройка тестового окружения
5. Выполнение тестирования
6. Завершение цикла тестирования

Какие роли существуют в команде продукта? В чём особенности каждой?

Опиши жизненный цикл бага.
1. Новый
2. Назначен
3. Открыт
4. Устранен
5.Ожидает повторного тестирования
6. Повторно тестируется
7. Повторно открыт.
8. Проверен 
9. Закрыт

Как понять, что баг исправлен?
Провести повторное тестирование. Регрессионное

Что делать, если проверка показала, что баг не исправлен? А если исправлен?
Исправленный баг - ЗАКРЫВАЕТСЯ, Не исправленный - Открывается Повторно

Работа с требованиями

Что такое бизнес-требования, системные требования и пользовательские требования?
Это первоначальные требования заказчика к продукту. Системные требования - это требоввания необходимые для реализации продукта.

Опиши основные характеристики хороших требований. 

Дай определение серой зоны в требованиях. 
Серая зана - это зога не описанная не в требованиях не в Figme

Как найти серые зоны?
Путем анализа требований и ФИГМЫ и тестирования

Что такое тест-анализ? Какова его цель?
Тест анализ это изучение требований и макетов. Когда будешь изучать, постарайся ответить на вопрос: что именно предстоит тестировать? 
Так ты составишь список объектов тестирования?
ДЕКОМПОЗИЦИЯ
ВИЗУАЛИЗАЦИЯ
ПОИСК СЕРЫХ ЗОН

Что такое матрица покрытия требований?
Матрица покрытия требований — это инструмент, который помогает тестировщикам понять, насколько требования покрыты тест-кейсами и надо ли то-то дописать или удалить. 
Матрицу покрытия требований оформляют в виде таблицы. По горизонтали, в заголовках столбцов — требования, по которым надо написать тесты. По вертикали, в строках — тест-кейсы. В ячейках на их пересечении обозначают, покрывается требование тест-кейсом или нет.



