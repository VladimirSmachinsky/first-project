Теория тестирования

Что такое тестирование? С какой целью его проводят? 
Тестирование - это комплекс мер для проверки и улучшению качества продукта. И соответствия его первоначальным требованиям.

Что делает тестировщик?
Тестировщик - это человек проверяющий соответствие продукта на ОР и ФР.
 
Что такое QA, QC, Testing? В чём между ними разница?
Как QA, так и QC в процессе разработки ПО влияют на качество конечного продукта и улучшают его надежность, безопасность и функциональность: QA помогает снизить риски и повысить эффективность процесса разработки, 
а QC, с другой стороны, обеспечивает проверку и контроль качества на финальной стадии разработки.

Что такое верификация и валидация?
Соответствие продукта требованиям (спецификации)
Верификация – это процесс проверки, что продукт соответствует определенным требованиям и спецификациям на каждом этапе разработки. Верификация фокусируется на «Делаем ли мы продукт правильно?«. Она включает в себя следующие действия:
Анализ требований
Использование статических методов анализа кода
Контроль проекта и процессов разработки
Проведение код-ревью
Пример верификации:
Проверка того, что требования к программному обеспечению ясны, полны и не противоречивы.

Валидация – это процесс проверки, что продукт соответствует ожиданиям и потребностям пользователей. Валидация фокусируется на «Делаем ли мы правильный продукт?«. Она включает в себя следующие действия:
Соответствие продукта потребностям пользователей
Тестирование функциональности
Тестирование производительности
Тестирование безопасности
Тестирование совместимости
Проведение пользовательского приема
Пример валидации:
Проверка того, что пользовательский интерфейс программного обеспечения удобен и соответствует ожиданиям пользователей.

Расскажи про принципы тестирования.
Нам известны 7 принципов тестирования и сейчас мы их подробно разберём.
Итак, приступим:
Исчерпывающее тестирование невозможно
Тестирование демонстрирует наличие дефектов, а не их отсутствие
Заблуждение об отсутствии ошибок
Раннее тестирование сохраняет время и деньги
Принцип скопления или кластеризация дефектов
Тестирование зависит от контекста
Парадокс пестицида 

Методы, типы и уровни тестирования?
Методы и Уровни: 1. Модульное, 2. Системное, 3. Приемочное 4. Смок, 5. Интеграционное 6. Черный, Серый, Белый ящик, 7. Регриссионное
Типы:  Функциональное, Нефункциональное, 
Какие есть типы/виды тестирования?
Типы: Ручное, Автоматическое тестирование
Модульные тесты Модульные тесты работают на очень низком уровне, близко к исходному коду приложения. ...

Виды функционально тестирования:
Интеграционные тесты ...
Функциональные тесты ...
Сквозные тесты ...
Приемочное тестирование ...
Тестирование производительности ...
Smoke-тестирование
Регрнссионное тестирование

Виды нефункционального тестирования: 
Тестирование производительности
Нагрузочное
Безопасности
Тестирование на отказ
Совместимости
Юзабилити-тестирование
Масштабируемости
Объемное тестирование
Стресс-тестирование
Удобства сопровождения
Совместимости
Общей эффективности
Надежности
Выносливости
Тестирование восстановления после катастрофического отказа

Какие есть методы тестирования?
Черный, Серый, Белый ящик, Автоматическое, Ручное

Какие есть уровни тестирования? 
Юнит-тестирование
Интеграционное тестирование
Системное тестирование
Приемочное тестирование
1. Юнит-тестирование:
Юнит — это самая маленькая часть продукта, которая может тестироваться. Название юнит равнозначно названию модуль, следовательно юнит-тестирование равнозначно модульному тестированию (также иногда называют блочным тестированием). Юнит-тестирование — это поиск ошибок в отдельных (изолированных) юнитах-компонентах. 
2. Интеграционное тестирование:
После завершения юнит-тестирования, два (или более) программных компонента проверяются на качество интеграции между собой. Взаимодействуют ли они между собой как ожидалось, или есть ошибки в интерфейсе между ними?
3. Системное тестирование
После завершения юнит- и интеграционного тестирования наступает этап системного тестирования. Проверка всех элементов, составляющих программную систему, на соответствие требованиям.
4. Приемочное тестирование
Последний уровень — проверка, выполнены ли требования конечных пользователей. Если приемочное тестирование успешно завершено, продукт идет на доставку (delivery), и считается, что продукт будет нормально работать в пользовательском окружении.

Что такое регрессионное тестирование?
Это проверка внедренной фичи или функциональности в рабочий продук. Проверка что не сломали остальной продукт.

Что такое функциональное тестирование?
Это проверка работоспособности основных функций продукта.

Что такое нефункциональное тестирование?
Это проверка самой программы  ее безопасности, Кросбраузерность, удобство использования,, адаптивность, нагрузочное.и.т.д.

Что такое интеграционное тестирование?
Интеграционное тестирование:
После завершения юнит-тестирования, два (или более) программных компонента проверяются на качество интеграции между собой. Взаимодействуют ли они между собой как ожидалось, или есть ошибки в интерфейсе между ними?

Что такое системное тестирование?
Системное тестирование
После завершения юнит- и интеграционного тестирования наступает этап системного тестирования. Проверка всех элементов, составляющих программную систему, на соответствие требованиям.

Что такое смоук-тестирование?
Это проверка основных функций системы (Включение, выключение и.т.д.)

Что такое компонентное тестирование?
Модульное — проверяет отдельные модули программы, чтобы убедиться, что они работают правильно независимо друг от друга.

Что такое санитарное тестирование?
Санитарное тестирование – это вид тестирования сборки ПО после изменений в коде или функциональности. 
Его цель – проверить, что старые ошибки исправлены, а новых не появилось. Если Sanity-тест не проходит, сборка отправляется на доработку, а не на более тщательное тестирование.

Что такое исследовательское тестирование?
Это неоформленное тестирование, сам выбираешь способы и что нужно тестированть, сам делаешь документацию.

Что такое тестирование безопасности?
Тестирование безопасности – комплекс исследований программного продукта, направленный на тестирование, обнаружение и исправление дефектов, связанных с сохранностью пользовательских данных, а именно.

Что такое «тестирование белым ящиком»?
Тестирование «белого ящика» подразумевает, что тестировщик имеет полный доступ к исходному коду программы и может анализировать его для выявления ошибок и недостатков. Этот метод обычно используется разработчиками для проверки своего кода на корректность.

Что такое «тестирование черным ящиком»? 
Тестирование «черного ящика» заключается в проверке функциональности программы без доступа к ее исходному коду. Тестировщик оценивает работу программы, основываясь на внешних проявлениях и поведении, не зная, как она устроена внутри.

Что такое «тестирование серым (стеклянным) ящиком»?
Тестирование «серого ящика» – это комбинация двух предыдущих методов. Тестировщик имеет частичный доступ к исходному коду или знает некоторые детали его работы, но в основном оценивает поведение программы снаружи.
 
В чем разница между кроссбраузерным и кроссплатформенным тестированием? 
Кроссплатформенность — это способность ПО работать с несколькими аппаратными платформами или операционными системами. Кроссбраузерное тестирование, например, может быть упрощено за счёт различных инструментов. Например, можно тестировать на виртуальной машине.
Кроссбраузерное тестирование - это практика обеспечения уверенности в том, что веб-сайты и веб-приложения, которые вы создаёте, работают в приемлемом количестве браузеров
Кроссплатформенность (межплатформенность) — способность программного обеспечения работать с несколькими аппаратными платформами или операционными системами.
Кроссплатформенная разработка приложений — это смелый подход к мобильной разработке и разработке в целом. Целью разработки кроссплатформенных приложений является повсеместная доступность на нескольких устройствах в рамках единой унифицирующей кодовой базы.

Что такое «end-to-end (сквозное) тестирование»? 
Это форма тестирования, которая проверяет работоспособность программного продукта от начала до конца, воссоздавая реальные сценарии использования и проверяя взаимодействие между различными компонентами системы.



